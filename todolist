check si la stack qu'on envoie est déjà sort
poursuivre sur la stack ou la condition while n'aa pas été attteinte (highest lowest)


if (check_sorting(stack->stack_a, stack->stack_a_len) == 1 && check_sorting(stack->stack_b, stack->stack_b_len) == 2)
		return ;
	while (stack->stack_a[0] != stack->stack_a_lowest && stack->stack_b[0] != stack->stack_b_highest) // 8 la plus petite valeur de la stack a
	{
		if (stack->stack_a[1] < stack->stack_a[0] && stack->stack_b[1] > stack->stack_b[0])
			do_ss(stack);
		else if (stack->stack_a[1] < stack->stack_a[0])
			do_sa(stack);
		else if(stack->stack_b[1] > stack->stack_b[0])
			do_sb(stack);
		else
			do_rrr(stack);
			if (check_sorting(stack->stack_a, stack->stack_a_len) == 1 && check_sorting(stack->stack_b, stack->stack_b_len) == 2)
		return ;
	}
	while (stack->stack_a[0] != stack->stack_a_highest && stack->stack_b[0] != stack->stack_b_lowest) // 173 la plus grande valeur de la stack a
	{
		if(stack->stack_a[1] < stack->stack_a[0] && stack->stack_b[1] > stack->stack_b[0])
			do_ss(stack);
		else if (stack->stack_a[1] < stack->stack_a[0])
			do_sa(stack);
		else if (stack->stack_b[1] > stack->stack_b[0])
			do_sb(stack);
		else
			do_rr(stack);
			if (check_sorting(stack->stack_a, stack->stack_a_len) == 1 && check_sorting(stack->stack_b, stack->stack_b_len) == 2)
		return ;
	}
	if (check_sorting(stack->stack_a, stack->stack_a_len) == 1 && check_sorting(stack->stack_b, stack->stack_b_len) == 2)
		return ;
	sort_stack(stack);
    


void	sort_stacka(t_stack *stack)
{
	if (check_sorting(stack->stack_a, stack->stack_a_len) == 1)
		return ;
	while (stack->stack_a[0] != stack->stack_a_lowest)
	{
		if (stack->stack_a[1] < stack->stack_a[0])
			do_sa(stack);
		else
			do_rra(stack);
		if (check_sorting(stack->stack_a, stack->stack_a_len) == 1)
			return ;
	}
	while (stack->stack_a[0] != stack->stack_a_highest)
	{
		if(stack->stack_a[1] < stack->stack_a[0])
				do_sa(stack);
		else
			do_ra(stack);
		if (check_sorting(stack->stack_a, stack->stack_a_len) == 1)
			return ;
	}
	sort_stacka(stack);
}